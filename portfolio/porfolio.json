<article>
	   <br>
			<h2><a id="heading1">Class Construction and Object<a></h2>
			
			<h3>C++</h3>
			<p>In c++ class, Construction consist of a .cpp and .h files. .h files are where class is defined and
			.cpp file is where class is implemented. .h have all the library we use in our object.</p>
		    <script src="https://gist.github.com/salsando1/0e3ce8269ffc87d4de0b6f4d1df25c11.js"></script>
			<p>Here we implemented are overloaded constructor and default constructor.</p>
			<script src="https://gist.github.com/salsando1/48cd2d6a84cee73b48c48ceb908d236d.js"></script>
	        <p>Here we implemented are overloaded method.</p>
			<script src="https://gist.github.com/salsando1/ebf961bc4e95c5bbfe9c85e9b33dda6c.js"></script>
			<br>
			<script src="https://gist.github.com/salsando1/fe881e881d5fc96026637e44d9f49b25.js"></script>
			<p>Here is where we make use of are overloaded constructor</p>
			<script src="https://gist.github.com/salsando1/3ba59c20b98d0dfac819a7219f47a90c.js"></script>
			<h3>C#</h3>
			<p>C# only use one file per class  of files is .cs.Here is where we declared are default
			constructor and overloaded constructor. Also, this constructor call the base constructor from sprocket class.</p>

			<p>Here is where we define are overloaded constructor. We initialize member variable through constructor.</p>
			<script src="https://gist.github.com/salsando1/e0e594a08f22c9439e2fc83d02b4aa30.js"></script>
			<p>Here is where we define are overloaded method.</p>
			<script src="https://gist.github.com/salsando1/8591a574f10335ec2f0ce0eaba90b47a.js"></script>
			<p>Here we implement one of the method. Were we only add to the end of the list. 
			We still have the option in the future if we want to implement adding at certain position.</p> 
            <script src="https://gist.github.com/salsando1/13094b4213a61869ca9f9a7608af83e1.js"></script>			
			<h3>Java</h3>
			<p>Java  like C# we can declare and define are class in the same file. The java files have the extension of file.java</p>
            <br>
            <p>Here is where I declare my overloaded constructor.</p>			
			<script src="https://gist.github.com/salsando1/a9304043df1926c3edaaa4f314df1d7e.js"></script>			
			<p>Here is where I declare my overloaded mutator. </p>
			<script src="https://gist.github.com/salsando1/7652d6bda0087d0a2a52bcdae047dc7d.js"></script>			
			<p>Here I decide to use the overloaded method by using int.</p>
			<script src="https://gist.github.com/salsando1/cc53d9e35aaa08d0f2c36bbc32db312f.js"></script>			
		    <p>Here a use the overloaded method by passing string and int.</p>	
		   <script src="https://gist.github.com/salsando1/9f53865775b03e58afeb6d1713d803c0.js"></script>				
          
		  <h2><a id="heading2">Inheritance and Polymorphism<a></h2>
		  <p>Inheritance is important because it allow us to reuse code.
		  Example if we have a base class vehicle. Member variable 
		  that contains tire, motor, color. We can create a child 
		  class call truck inherit all those Qualities just add cargo bed
		  variable. This way we do not to write the whole class.</p>
		   <h3>C#</h3>
	       <p>Game object is going to be are base class</p>
	       <script src="https://gist.github.com/salsando1/82fd86eb50b38f914046d9d7cce1605c.js"></script>					
		   <p>Here is where tell the compiler this child class and we are going to inherit from this base class.</p>   
		   <script src="https://gist.github.com/salsando1/51773312d97600e5de279f7741c1b8d8.js"></script>						
		   <p>Since we inherit from Game object. Alien is the same data type as Game object.</p>
		   <script src="https://gist.github.com/salsando1/e7e1d06ab9523af4a9a7f5d539a87e7e.js"></script>						
		   <h2><a id="heading3">Graphical User Interface Construction</a></h2>
		   <p>The Most modern Graphical user interface for windows is Windows
		   form.  Windows form is from .Net framework. We start by 
		   inherit from window.  We get the basics just a frame like 
		   in swing. We can start adding are controllers through 
		   the XAML.</p>
		   <script src="https://gist.github.com/salsando1/0fc02f433fe07264429eada0c8a130a4.js"></script>
		   <p>What makes windows form more dynamic is XAML. You can easily make 
		   changes to your GUI. Nest controllers inside of controllers. 
		   Initialize the GUI like when launch certain check box needs to be
		   check with a line of code.</p>
		   <img src="portfolio/csGuiMaiinScreeen.jpg"  alt="c++ class construction" height="575" width="646">
		   <p>Dialogs are important so you can tell the user if he is doing something wrong.</p>
		   <img src="portfolio/csGuiDialog.jpg"  alt="c++ class construction" height="590" width="685">
		    <p>Another way you can interact with the user is by writing the result or probably an order like following.</p> 
		   <script src="https://gist.github.com/salsando1/432eed34dd1959bc1a557421a453301b.js"></script>
		   
		   <h2><a id="heading4">Database manipulation</a></h2>
		   <h3>C#</h3>
		   <p>GUI are important especially when you can combined with a 
		   connection through a database. .Since Microsoft have its Microsoft 
		   SQL server.  C# library for Microsoft SQL is sqlClient. Allow as to 
		   connect to database and query the database without using SQL syntax.</p>
		   <script src="https://gist.github.com/salsando1/562187f46f56bf2eb8c200a096070ad5.js"></script>
		   <p>Here is how we create are connection to server. Also, how we 
		   open the connection and make sure if anything goes wrong we closed
		   the connection.</p>
		   <script src="https://gist.github.com/salsando1/6242a152e522792ca85c0fa49beafbbc.js"></script>
           <p>Here is how we Query the database for example update statement.</p>		   
		   <script src="https://gist.github.com/salsando1/3347d56cf00ecbd3396020986c266f30.js"></script>
		   	</article>	   